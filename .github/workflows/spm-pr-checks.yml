name: Swift Package PR Checks

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
      code-coverage-required:
        description: 'Fail if coverage is below this percent. (Default 50%)'
        required: false
        default: 50
        type: number
      code-coverage-exclude: 
        description: 'Regex pattern of file paths to exclude from coverage calculation'
        required: false
        default: '\.build|Tests|Internal|Mock'
        type: string

env:
  DEVELOPER_DIR: /Applications/Xcode_14.1.app/Contents/Developer
  GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
  CODECOV_DIR: .build/debug/codecov
  SWIFT_TEST_CODECOV_PARAMS: --no-warn-missing-tests --base-json-file ./base-coverage.json

jobs:
  get-historic-coverage:
    runs-on: ubuntu-latest

    # we want to skip all checks in case of draft PRs
    if: ${{ !github.event.pull_request.draft }}
    name: Checkout Historic Coverage Report from `main` branch
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages

      - name: Store coverage for later...
        uses: actions/upload-artifact@v3
        with:
          name: base-coverage
          path: ./gh-pages/coverage.json

  lint-unit-test-and-coverage:
    runs-on: macos-12
    needs: get-historic-coverage

    # we want to skip all checks in case of draft PRs
    if: ${{ !github.event.pull_request.draft }}
    name: Test and Coverage
    steps:

      - uses: actions/checkout@v3

      - name: Download main branch coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: base-coverage
          path: ./

      - name: Rename main branch coverage file
        run: |
          mv coverage.json base-coverage.json

      - uses: actions/cache@v3
        name: Restore .build folder from cache
        id: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('./Package.resolved') }}
          
      - name: workaround SPM issue with fetching GitHub dependencies over SSH
        run: ssh-add - <<< "$GIT_SSH_PRIVATE_KEY"

      - name: add github to known_hosts to prevent issues with fetching SPM dependencies
        run: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts

      - name: Run swiftlint in strict mode
        run: swiftlint lint --strict

      - name: Run unit tests (all targets) and collect coverage
        run: swift test --parallel --disable-automatic-resolution --enable-code-coverage

      - name: Create the Code Coverage file if it doesn't exist (No unit tests)
        run: |
          [ ! -f "${CODECOV_DIR}/${{ inputs.project-name }}.json" ] && echo '{"version":"","type":"","data":[]}' > ${CODECOV_DIR}/${{ inputs.project-name }}.json
          
      - name: DEBUG Swift Test Coverage Output
        run: |
          ls -la ${CODECOV_DIR}/
          cat ${CODECOV_DIR}/${{ inputs.project-name }}.json

      - name: Install swift-test-codecov
        run: brew install bellumai/homebrew-tap/swift-test-codecov

      - name: Generate Code Coverage Table
        run: |
          swift-test-codecov ${CODECOV_DIR}/${{ inputs.project-name }}.json --print-format table --exclude-path "${{ inputs.code-coverage-exclude }}" ${SWIFT_TEST_CODECOV_PARAMS}
          swift-test-codecov ${CODECOV_DIR}/${{ inputs.project-name }}.json --print-format table --exclude-path "${{ inputs.code-coverage-exclude }}" ${SWIFT_TEST_CODECOV_PARAMS} > coverage-table.txt

      - name: Store code coverage table to environment variable
        id: coverage-table
        run: |
          echo "COVERAGE_TABLE<<EOF" >> $GITHUB_OUTPUT
          echo "$(<coverage-table.txt)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Print Coverage Table
        run: echo "${{ steps.coverage-table.outputs.COVERAGE_TABLE }}"

      - name: Comment PR with Coverage Table
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ### Unit Test Code Coverage:

            ```
            ${{ steps.coverage-table.outputs.COVERAGE_TABLE }}
            ```
          comment_tag: coverage

      - name: Check Code Coverage (and fail if under 50% or coverage amount goes down.)
        run: |
          swift-test-codecov ${CODECOV_DIR}/${{ inputs.project-name }}.json --minimum ${{  inputs.code-coverage-required }} --fail-on-negative-delta --exclude-path "${{ inputs.code-coverage-exclude }}" ${SWIFT_TEST_CODECOV_PARAMS}